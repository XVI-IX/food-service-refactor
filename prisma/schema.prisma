// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum userRole {
  customer
  vendor
}

enum genericStatus {
  pending
  accepted
}

enum OrderStatusEnum {
  placed
  confirmed
  in_progress
  out_for_delivery
  delivered
  cancelled
}

enum OrderTypeEnum {
  delivery
  pickup
  dine_in
}

enum OrderEventTypeEnum {
  status_change
  modification
  cancellation
}

enum PaymentStatusEnum {
  pending
  success
  failed
  reversed
  cancelled
}

model users {
  id                Int            @id @default(autoincrement())
  userName          String
  firstName         String
  otherName         String?
  lastName          String
  phone             String
  password          String
  google_id         String?
  role              userRole       @default(customer)
  verified          Boolean        @default(false)
  verificationToken String?        @unique
  resetToken        String?
  createdAt         DateTime       @default(now()) @db.Timestamp(6)
  updatedAt         DateTime       @updatedAt
  status            genericStatus  @default(pending)
  businessAddress   String?
  recipientCode     String?
  stores            stores[]
  orders            orders[]
  orderHistory      orderHistory[]
}

model stores {
  id                        Int           @id @default(autoincrement())
  user                      users         @relation(fields: [userId], references: [id])
  userId                    Int
  name                      String
  address                   String
  phone                     String
  email                     String
  instagramUrl              String?
  facebookUrl               String?
  xUrl                      String?
  youtubeUrl                String?
  description               String
  openingHours              String?
  deliveryRadius            Float?
  deliveryFee               Float?        @default(0)
  minOrderAmountForDelivery Float?        @default(0)
  latitude                  Float?
  longitude                 Float?
  active                    Boolean?      @default(false)
  status                    genericStatus @default(pending)
  createdAt                 DateTime      @default(now()) @db.Timestamp(6)
  updatedAt                 DateTime      @updatedAt
  avgRating                 Float?
  totalReviews              Int?
  isOpen                    Boolean?      @default(true)
  items                     items[]
  orders                    orders[]
  payments                  payments[]
}

model items {
  id          Int          @id @default(autoincrement())
  store       stores       @relation(fields: [storeId], references: [id])
  storeId     Int
  name        String       @db.VarChar(255)
  description String       @db.Text()
  price       Float
  ingredients String[]
  calories    Float?
  fatContent  Float?
  portionSize String?
  allergens   String[]
  tags        String[]
  createdAt   DateTime     @default(now()) @db.Timestamp(6)
  updatedAt   DateTime     @updatedAt
  orderItems  orderItems[]
}

model orders {
  id                    Int             @id @default(autoincrement())
  user                  users           @relation(fields: [userId], references: [id])
  userId                Int
  store                 stores          @relation(fields: [storeId], references: [id])
  storeId               Int
  deliveryLocation      String
  deliveryStatus        OrderStatusEnum @default(placed)
  orderReference        String          @unique @default(uuid())
  deliveryInstructions  String?         @db.Text
  subTotalPrice         Float
  paymentMethod         String?
  estimatedDeliveryTime DateTime?
  feedback              String?
  rating                Float?
  promoCode             String?
  cancellationReason    String?
  taxAmount             String?
  deliveryFee           String?
  timeslot              timeslots       @relation(fields: [timeslotId], references: [id])
  timeslotId            Int
  orderHistory          orderHistory[]
  orderItems            orderItems[]
  payments              payments[]
}

model orderHistory {
  id        Int                @id @default(autoincrement())
  order     orders             @relation(fields: [orderId], references: [id])
  orderId   Int
  eventType OrderEventTypeEnum @default(status_change)
  timestamp DateTime           @default(now()) @db.Timestamp(6)
  actor     users              @relation(fields: [actorId], references: [id])
  actorId   Int
  details   String?
  createdAt DateTime           @default(now()) @db.Timestamp()
  updatedAt DateTime           @updatedAt
}

model orderItems {
  id             Int    @id @default(autoincrement())
  order          orders @relation(fields: [orderId], references: [id])
  orderId        Int
  item           items  @relation(fields: [itemId], references: [id])
  itemId         Int
  quantity       Int    @default(1)
  totalItemPrice Float?
  price          Float
}

model timeslots {
  id              Int      @id @default(autoincrement())
  startTime       DateTime @db.Timestamp(6)
  endTime         DateTime @db.Timestamp(6)
  timezone        String
  orderCount      Int      @default(0)
  currentCapacity Int      @default(0)
  isAvailable     Boolean  @default(true)
  orders          orders[]

  @@unique([startTime, endTime])
}

model payments {
  id              Int                @id @default(autoincrement())
  reference       String             @unique
  transactionId   String?
  order           orders             @relation(fields: [orderId], references: [id])
  orderId         Int
  store           stores             @relation(fields: [storeId], references: [id])
  storeId         Int
  paymentStatus   PaymentStatusEnum? @default(pending)
  amount          Float?             @default(0)
  paymentDate     DateTime?
  gatewayResponse Json?
  createdAt       DateTime           @default(now()) @db.Timestamp(6)
  updatedAt       DateTime           @updatedAt @db.Timestamp(6)
}
