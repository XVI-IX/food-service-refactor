// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum userRole {
  customer
  vendor
}

enum genericStatus {
  pending
  accepted
}

enum OrderStatusEnum {
  placed
  confirmed
  in_progress
  out_for_delivery
  delivered
  cancelled
  failed
}

enum OrderTypeEnum {
  delivery
  pickup
  dine_in
}

enum OrderEventTypeEnum {
  placement
  status_change
  modification
  cancellation
}

enum PaymentStatusEnum {
  pending
  success
  failed
  reversed
  cancelled
}

model users {
  id                   String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userName             String
  firstName            String
  otherName            String?
  lastName             String
  phone                String
  email                String          @unique
  password             String
  google_id            String?
  role                 userRole        @default(customer)
  verified             Boolean         @default(false)
  verificationToken    String?         @unique
  resetToken           String?
  resetTokenExpiration String?
  createdAt            DateTime        @default(now()) @db.Timestamp(6)
  updatedAt            DateTime        @updatedAt
  status               genericStatus?  @default(pending)
  businessAddress      String?
  recipientCode        String?
  stores               stores[]
  orders               orders[]
  orderHistory         orderHistory[]
  transactions         transactions[]
  userSettings         userSettings[]
  notifications        notifications[]
  reviews              reviews[]
}

model userSettings {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid
}

model stores {
  id                        String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user                      users           @relation(fields: [userId], references: [id])
  userId                    String          @db.Uuid
  name                      String
  address                   String
  phone                     String
  email                     String
  instagramUrl              String?
  facebookUrl               String?
  xUrl                      String?
  youtubeUrl                String?
  description               String
  openingHours              String?
  deliveryRadius            Float?
  deliveryFee               Float?          @default(0)
  minOrderAmountForDelivery Float?          @default(0)
  latitude                  Float?
  longitude                 Float?
  active                    Boolean?        @default(false)
  status                    genericStatus   @default(pending)
  createdAt                 DateTime        @default(now()) @db.Timestamp(6)
  updatedAt                 DateTime        @updatedAt
  avgRating                 Float?
  totalReviews              Int?
  isOpen                    Boolean?        @default(true)
  items                     items[]
  orders                    orders[]
  transactions              transactions[]
  reviews                   reviews[]
  notifications             notifications[]
}

model items {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  store       stores       @relation(fields: [storeId], references: [id])
  storeId     String       @db.Uuid
  name        String       @db.VarChar(255)
  description String       @db.Text()
  price       Float
  ingredients String[]
  calories    Float?
  fatContent  Float?
  portionSize String?
  allergens   String[]
  tags        String[]
  createdAt   DateTime     @default(now()) @db.Timestamp(6)
  updatedAt   DateTime     @updatedAt
  orderItems  orderItems[]
  reviews     reviews[]
}

model orders {
  id                    String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user                  users           @relation(fields: [userId], references: [id])
  userId                String          @db.Uuid
  store                 stores          @relation(fields: [storeId], references: [id])
  storeId               String          @db.Uuid
  deliveryLocation      String
  deliveryStatus        OrderStatusEnum @default(placed)
  orderReference        String          @unique @default(uuid())
  deliveryInstructions  String?         @db.Text
  subTotalPrice         Float
  paymentMethod         String?
  estimatedDeliveryTime DateTime?
  feedback              String?
  rating                Float?
  promoCode             String?
  cancellationReason    String?
  taxAmount             String?
  deliveryFee           String?
  timeslot              timeslots?      @relation(fields: [timeslotId], references: [id])
  timeslotId            String?         @db.Uuid
  orderHistory          orderHistory[]
  orderItems            orderItems[]
  transactions          transactions[]
}

model orderHistory {
  id        String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order     orders             @relation(fields: [orderId], references: [id])
  orderId   String             @db.Uuid
  eventType OrderEventTypeEnum @default(status_change)
  timestamp DateTime           @default(now()) @db.Timestamp(6)
  actor     users              @relation(fields: [actorId], references: [id])
  actorId   String             @db.Uuid
  details   String?
  createdAt DateTime           @default(now()) @db.Timestamp()
  updatedAt DateTime           @updatedAt
}

model orderItems {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order          orders   @relation(fields: [orderId], references: [id])
  orderId        String   @db.Uuid
  item           items    @relation(fields: [itemId], references: [id])
  itemId         String   @db.Uuid
  quantity       Int      @default(1)
  totalItemPrice Float?
  price          Float?
  createdAt      DateTime @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime @updatedAt
}

model timeslots {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  startTime       DateTime @db.Timestamp(6)
  endTime         DateTime @db.Timestamp(6)
  timezone        String
  orderCount      Int?     @default(0)
  currentCapacity Int?     @default(0)
  isAvailable     Boolean  @default(true)
  orders          orders[]

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([startTime, endTime])
}

model transactions {
  id              String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user            users              @relation(fields: [userId], references: [id])
  userId          String             @db.Uuid
  description     String?
  reference       String?            @unique
  order           orders?            @relation(fields: [orderId], references: [id])
  orderId         String?            @db.Uuid
  store           stores?            @relation(fields: [storeId], references: [id])
  storeId         String?            @db.Uuid
  paymentStatus   PaymentStatusEnum? @default(pending)
  amount          Float?             @default(0)
  transactionType String             @default("trasacio")
  paymentDate     DateTime?
  gatewayResponse Json?
  createdAt       DateTime           @default(now()) @db.Timestamp(6)
  updatedAt       DateTime           @updatedAt @db.Timestamp(6)
}

model revokedToken {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token     String   @unique
  revokedAt DateTime @default(now()) @db.Timestamptz(6)
}

model notifications {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  description String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt

  user   users?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @db.Uuid

  store   stores? @relation(fields: [storeId], references: [id], onDelete: SetNull)
  storeId String? @db.Uuid
}

model reviews {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content String @db.Text
  rating  Float? @default(0) @db.DoublePrecision

  user       users  @relation(fields: [reviewerId], references: [id], onDelete: SetDefault)
  reviewerId String @db.Uuid

  store   stores? @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId String? @db.Uuid

  item   items?  @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId String? @db.Uuid
}
